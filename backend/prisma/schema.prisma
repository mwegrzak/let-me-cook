// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

// generator erd {
//   provider = "prisma-erd-generator"
//   includeRelationFromFields = true
// }

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String
  password       String
  isAdmin        Boolean         @default(false)
  recipes        Recipe[]
  PasswordResets PasswordReset[]
  Uploads        Upload[]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model PasswordReset {
  token     String   @id
  userId    String
  validTill DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recipe {
  id               String             @id @default(cuid())
  name             String
  description      String
  difficulty       Int
  servings         Int
  prepTime         Int
  cookTime         Int
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  uploadId         String?
  upload           Upload?            @relation(fields: [uploadId], references: [id], onDelete: SetNull)
  recipeIngredients RecipeIngredient[]
  recipeSteps       RecipeStep[]
}

model RecipeIngredient {
  id       String @id @default(cuid())
  recipeId String
  name     String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model RecipeStep {
  id          String @id @default(cuid())
  recipeId    String
  description String
  recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Upload {
  id      String   @id @default(uuid())
  type    Int      @default(0)
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Recipes Recipe[]
}
